// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createProductsFromRequest = `-- name: CreateProductsFromRequest :one
INSERT INTO products (id, name, price, created_at, updated_at, posted_by)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW(),
    $3

)
RETURNING id, name, price, created_at, updated_at, posted_by
`

type CreateProductsFromRequestParams struct {
	Name     string
	Price    string
	PostedBy uuid.UUID
}

func (q *Queries) CreateProductsFromRequest(ctx context.Context, arg CreateProductsFromRequestParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProductsFromRequest, arg.Name, arg.Price, arg.PostedBy)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostedBy,
	)
	return i, err
}

const deleteProductByID = `-- name: DeleteProductByID :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProductByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductByID, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, created_at, updated_at, posted_by FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PostedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, created_at, updated_at, posted_by FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostedBy,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET 
    name = $2,
    price = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, price, created_at, updated_at, posted_by
`

type UpdateProductParams struct {
	ID    uuid.UUID
	Name  string
	Price string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.ID, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostedBy,
	)
	return i, err
}
