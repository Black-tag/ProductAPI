definitions:
  database.Product:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      postedBy:
        type: string
      price:
        type: string
      updatedAt:
        type: string
    type: object
  database.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      hashedpassword:
        type: string
      id:
        type: string
      role:
        type: string
      updatedAt:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      cretaed_at:
        type: string
      email:
        type: string
      id:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  models.ProductCreationRequest:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  models.ProductCreationResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      posted_by:
        type: string
      price:
        type: string
      updated_at:
        type: string
    type: object
  models.UpdateProductRequest:
    properties:
      name:
        type: string
      price:
        type: string
    type: object
  models.UpdatedProductResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      posted_by:
        type: string
      price:
        type: string
      updated_at:
        type: string
    type: object
  models.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Existing users can login using email and password
      parameters:
      - description: user login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Login an existing  user
      tags:
      - users
  /api/v1/product:
    get:
      consumes:
      - application/json
      description: users can get all existing Products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Product'
        "400":
          description: Bad Request - Invalid input
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get existing  products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Existing users can create aproducts
      parameters:
      - description: Product creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductCreationResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            type: string
        "404":
          description: Not Found - Resource doesn't exist
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create Products
      tags:
      - products
  /api/v1/product/{productID}:
    delete:
      consumes:
      - application/json
      description: admin can delete product using their id
      parameters:
      - description: ProductID
        in: path
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "400":
          description: Bad Request - Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized - Missing/invalid credentials
          schema:
            type: string
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete an existing  product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Existing users can update their product
      parameters:
      - description: productID
        in: path
        name: bugid
        required: true
        type: string
      - description: product updation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdatedProductResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized - Missing/invalid credentials
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing  product
      tags:
      - products
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Creates user with Email and Password
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Bad Request - Invalid input
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Creates a new  user
      tags:
      - users
swagger: "2.0"
